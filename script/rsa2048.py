from nttrsa import NttRsa, CT_BFU, GS_BFU


def ZetasGen():
    indexes = []
    drop = False
    while True:
        if len(indexes) == 0:
            num = 64
        else:
            if not drop:
                num = indexes[0] // 2
            else:
                num = (indexes[0] + 64) // 2
                indexes.pop(0)
            drop = not drop
        indexes.append(num)
        yield num


class NttRsa2048_32b(NttRsa):
    """
    NTT-RSA 2048-bit key size with on 32-bit processor
    """

    def __init__(self):
        super().__init__(2048, 11, 384, 12289, 65537)

        self.zetas1 = [
            1, 81, 6561, 3014, 10643, 1853, 2625, 3712,
            5736, 9923, 4978, 9970, 8785, 11112, 2975, 7484,
            4043, 7969, 6461, 7203, 5860, 7678, 7468, 2747,
            1305, 7393, 8961, 790, 2545, 9521, 9283, 2294,
            1479, 9198, 7698, 9088, 11077, 140, 11340, 9154,
            4134, 3051, 1351, 11119, 3542, 4255, 563, 8736,
            7143, 1000, 7266, 10963, 3195, 726, 9650, 7443,
            722, 9326, 5777, 955, 3621, 10654, 2744, 1062,
            12288, 12208, 5728, 9275, 1646, 10436, 9664, 8577,
            6553, 2366, 7311, 2319, 3504, 1177, 9314, 4805,
            8246, 4320, 5828, 5086, 6429, 4611, 4821, 9542,
            10984, 4896, 3328, 11499, 9744, 2768, 3006, 9995,
            10810, 3091, 4591, 3201, 1212, 12149, 949, 3135,
            8155, 9238, 10938, 1170, 8747, 8034, 11726, 3553,
            5146, 11289, 5023, 1326, 9094, 11563, 2639, 4846,
            11567, 2963, 6512, 11334, 8668, 1635, 9545, 11227
        ]
        self.zetas2 = [
            1, 2469, 1020, 27974, 57345, 24885, 32896, 19881,
            64513, 27687, 4112, 59830, 65409, 11653, 514, 23863,
            65521, 26033, 49217, 11175, 65535, 60599, 63497, 9589,
            16384, 15767, 65282, 25775, 2048, 10163, 57313, 11414,
            256, 42231, 64509, 17811, 32, 13471, 32640, 43187,
            4, 9876, 4080, 46359, 32769, 34003, 510, 13987,
            61441, 45211, 16448, 42709, 65025, 46612, 2056, 29915,
            65473, 38595, 257, 44700, 65529, 45785, 57377, 38356,
            65536, 63068, 64517, 37563, 8192, 40652, 32641, 45656,
            1024, 37850, 61425, 5707, 128, 53884, 65023, 41674,
            16, 39504, 16320, 54362, 2, 4938, 2040, 55948,
            49153, 49770, 255, 39762, 63489, 55374, 8224, 54123,
            65281, 23306, 1028, 47726, 65505, 52066, 32897, 22350,
            65533, 55661, 61457, 19178, 32768, 31534, 65027, 51550,
            4096, 20326, 49089, 22828, 512, 18925, 63481, 35622,
            64, 26942, 65280, 20837, 8, 19752, 8160, 27181
        ]

    def crt(self, a: int, b: int) -> int:
        """Chinese Remainder Theorem
        Input: a mod q1, b mod q2
        Output: x such that x mod q1 = a, x mod q2 = b"""
        # qinv = 45373 = 12289 ** 65535 % 65537
        q1inv = 45373
        return a + (((b-a) * q1inv % self.q2) * self.q1) % self.q

    def ntt_q1(self, l: list[int]) -> list[int]:
        """Run NTT on the integer list"""
        raise NotImplementedError

    def intt_q1(self, l: list[int]) -> list[int]:
        """Run Inverse NTT on the integer list"""
        raise NotImplementedError

    def ntt_q2(self, l: list[int]) -> list[int]:
        """Run NTT on the integer list"""
        raise NotImplementedError

    def intt_q2(self, l: list[int]) -> list[int]:
        """Run Inverse NTT on the integer list"""
        raise NotImplementedError
